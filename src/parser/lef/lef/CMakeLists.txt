# 

set(_SUBDIRNAME lef)
set(_SUBLIBNAME ${PROJECT_NAME_LOWERCASE}_${_SUBDIRNAME})
set(_SUBBINNAME "")

# -begin bison

ADD_CUSTOM_TARGET(${_SUBDIRNAME}ParserDependence
    DEPENDS ${GEN_SOURCES}
)

SET(GEN_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/${_SUBDIRNAME}.tab.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/${_SUBDIRNAME}.tab.h
)

SET_SOURCE_FILES_PROPERTIES(${GEN_SOURCES} GENERATED)

ADD_CUSTOM_COMMAND(
    OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/${_SUBDIRNAME}.tab.cpp ${CMAKE_CURRENT_SOURCE_DIR}/${_SUBDIRNAME}.tab.h
    COMMAND bison -v -p${_SUBDIRNAME}yy -d lef.y
    COMMAND mv ${CMAKE_CURRENT_SOURCE_DIR}/${_SUBDIRNAME}.tab.c ${CMAKE_CURRENT_SOURCE_DIR}/${_SUBDIRNAME}.tab.cpp
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
# -end bison

file(GLOB_RECURSE SRCS *.cpp)

add_library(${_SUBLIBNAME} STATIC ${SRCS} ${CMAKE_CURRENT_SOURCE_DIR}/${_SUBDIRNAME}.tab.cpp)
ADD_DEPENDENCIES(${_SUBLIBNAME} ${_SUBDIRNAME}ParserDependence)

target_include_directories(${_SUBLIBNAME}
    PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/../.."
    INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})

# must turn fPIC on 
set_target_properties(${_SUBLIBNAME} PROPERTIES POSITION_INDEPENDENT_CODE TRUE)

install(TARGETS ${_SUBLIBNAME} 
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib/static
  )

# install headers 
file(GLOB_RECURSE HEADERS *.h *.hpp)
install(FILES ${HEADERS} DESTINATION include/src/parser/lef/${_SUBDIRNAME})

unset(_SUBDIRNAME)
unset(_SUBLIBNAME)
unset(_SUBBINNAME)
